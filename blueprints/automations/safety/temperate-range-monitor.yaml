blueprint:
  name: "Temperature Range Monitor"
  description: |
    Monitor a temperature sensor and send notifications when temperature goes outside
    of an allowed range for a specified period. Supports repeat notifications while
    out of range and notifications when returning to normal range.
    
    **Features:**
    - Support for any temperature sensor
    - Configurable temperature range monitoring
    - Flexible notification service selection
    - Customizable notification delay threshold
    - Repeat notifications while out of range
    - Recovery notifications when back in range
    
    **Recommended Temperature Ranges:**
    - **Refrigerator**: 35-38°F (1.7-3.3°C)
    - **Freezer**: -5-0°F (-20.6 to -17.8°C) 
    - **Wine Storage**: 45-65°F (7.2-18.3°C)
    - **Food Storage Pantry**: 50-70°F (10-21.1°C)
    - **Greenhouse**: 65-75°F (18.3-23.9°C)
    - **Server Room**: 64-75°F (17.8-23.9°C)
    - **Pharmaceutical Storage**: 68-77°F (20-25°C)
    - **Baby Room**: 68-72°F (20-22.2°C)
  domain: automation
  author: "William Bartholomew"
  homeassistant:
    min_version: "2024.6.0"
  input:
    # Main Configuration Section
    main_config:
      name: "Main Configuration"
      icon: "mdi:thermometer"
      description: "Primary temperature monitoring configuration"
      input:
        temperature_sensor:
          name: Temperature Sensor
          description: The temperature sensor to monitor
          selector:
            entity:
              filter:
                domain: sensor
                device_class: temperature
        
        min_temperature:
          name: Minimum Temperature
          description: Minimum allowed temperature (in the unit of your sensor)
          selector:
            number:
              min: -50
              max: 150
              step: 0.1
              mode: box
              unit_of_measurement: "°"
        
        max_temperature:
          name: Maximum Temperature
          description: Maximum allowed temperature (in the unit of your sensor)
          selector:
            number:
              min: -50
              max: 150
              step: 0.1
              mode: box
              unit_of_measurement: "°"
        
        location_name:
          name: Location Name
          description: Descriptive name for the monitored location (e.g., "Kitchen Refrigerator")
          default: "Temperature Sensor"
          selector:
            text:

    # Notification Settings Section
    notification_config:
      name: "Notification Settings"
      icon: "mdi:bell-alert"
      description: "Configure notification delivery and timing"
      input:
        notification_service:
          name: "Notification Service"
          description: "The notification service to use for alerts"
          default: "notify.notify"
          selector:
            select:
              custom_value: true
              options:
                - "notify.notify"
                - "notify.mobile_app"
                - "notify.persistent_notification"

        initial_notification_delay:
          name: "Initial Notification Delay"
          description: "How long temperature must be outside range before triggering first notification"
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
              unit_of_measurement: "minutes"
              mode: slider

        send_reminders:
          name: "Send Reminder Notifications"
          description: "Send additional notifications while temperature remains out of range"
          default: false
          selector:
            boolean:

        reminder_interval:
          name: "Reminder Interval"
          description: "Time between reminder notifications"
          default: 30
          selector:
            number:
              min: 5
              max: 480
              step: 5
              unit_of_measurement: "minutes"
              mode: slider
        
        max_reminder_count:
          name: "Maximum Reminder Count"
          description: "Maximum number of reminder notifications (0 = unlimited)"
          default: 0
          selector:
            number:
              min: 0
              max: 50
              mode: box
        
        send_resolution_notification:
          name: "Send Resolution Notification"
          description: "Send notification when temperature returns to normal range"
          default: true
          selector:
            boolean:

    # Notification Content Section
    notification_content_config:
      name: "Customize Notification Content (Optional)"
      icon: "mdi:message-text"
      description: "Customize notification titles and messages"
      collapsed: true
      input:
        notification_title:
          name: "Temperature Alert Title"
          description: "Title for temperature alerts"
          default: "🌡️ Temperature Alert"
          selector:
            text:
        
        low_temp_message:
          name: "Low Temperature Message"
          description: |
            Message template for low temperature alerts. Available variables:
            - `{location}`: Location name
            - `{current_temp}`: Current temperature reading
            - `{min_temp}`: Minimum allowed temperature
            - `{max_temp}`: Maximum allowed temperature
            - `{temp_unit}`: Temperature unit
          default: "🥶 Temperature is too LOW: {current_temp}{temp_unit} in {location}\n\n📊 Current: {current_temp}{temp_unit}\n📉 Minimum: {min_temp}{temp_unit}\n📈 Maximum: {max_temp}{temp_unit}"
          selector:
            text:
              multiline: true
        
        high_temp_message:
          name: "High Temperature Message"
          description: |
            Message template for high temperature alerts. Available variables:
            - `{location}`: Location name
            - `{current_temp}`: Current temperature reading
            - `{min_temp}`: Minimum allowed temperature
            - `{max_temp}`: Maximum allowed temperature
            - `{temp_unit}`: Temperature unit
          default: "🔥 Temperature is too HIGH: {current_temp}{temp_unit} in {location}\n\n📊 Current: {current_temp}{temp_unit}\n📉 Minimum: {min_temp}{temp_unit}\n📈 Maximum: {max_temp}{temp_unit}"
          selector:
            text:
              multiline: true
        
        reminder_title:
          name: "Reminder Title"
          description: "Title for reminder notifications"
          default: "🔄 Temperature Still Out of Range"
          selector:
            text:
        
        low_temp_reminder_message:
          name: "Low Temperature Reminder Message"
          description: |
            Message template for repeated low temperature alerts. Available variables:
            - `{location}`: Location name
            - `{current_temp}`: Current temperature reading
            - `{temp_unit}`: Temperature unit
            - `{duration}`: Duration out of range
          default: "🥶 Temperature remains too LOW: {current_temp}{temp_unit} in {location}\n\nDuration: {duration}"
          selector:
            text:
              multiline: true
        
        high_temp_reminder_message:
          name: "High Temperature Reminder Message"
          description: |
            Message template for repeated high temperature alerts. Available variables:
            - `{location}`: Location name
            - `{current_temp}`: Current temperature reading
            - `{temp_unit}`: Temperature unit
            - `{duration}`: Duration out of range
          default: "🔥 Temperature remains too HIGH: {current_temp}{temp_unit} in {location}\n\nDuration: {duration}"
          selector:
            text:
              multiline: true
        
        resolution_title:
          name: "Resolution Title"
          description: "Title for resolution notifications"
          default: "✅ Temperature Normal"
          selector:
            text:
        
        resolution_message:
          name: "Resolution Message"
          description: |
            Message template when temperature returns to normal. Available variables:
            - `{location}`: Location name
            - `{current_temp}`: Current temperature reading
            - `{min_temp}`: Minimum allowed temperature
            - `{max_temp}`: Maximum allowed temperature
            - `{temp_unit}`: Temperature unit
          default: "✅ Temperature has returned to normal range: {current_temp}{temp_unit} in {location}\n\n📊 Current: {current_temp}{temp_unit}\n📉 Minimum: {min_temp}{temp_unit}\n📈 Maximum: {max_temp}{temp_unit}"
          selector:
            text:
              multiline: true

variables:
  sensor_name: !input temperature_sensor
  min_temp: !input min_temperature
  max_temp: !input max_temperature
  location: !input location_name
  notification_service: !input notification_service
  initial_notification_delay: !input initial_notification_delay
  send_reminders: !input send_reminders
  reminder_interval: !input reminder_interval
  max_reminder_count: !input max_reminder_count
  send_resolution_notification: !input send_resolution_notification
  current_temp: "{{ states(sensor_name) | float }}"
  temp_unit: "{{ state_attr(sensor_name, 'unit_of_measurement') }}"
  # Message templates
  notification_title: !input notification_title
  low_temp_message_template: !input low_temp_message
  high_temp_message_template: !input high_temp_message
  reminder_title: !input reminder_title
  low_temp_reminder_message_template: !input low_temp_reminder_message
  high_temp_reminder_message_template: !input high_temp_reminder_message
  resolution_title: !input resolution_title
  resolution_message_template: !input resolution_message

trigger:
  # Trigger when temperature goes outside range
  - platform: numeric_state
    entity_id: !input temperature_sensor
    below: !input min_temperature
    for:
      minutes: !input initial_notification_delay
    id: "below_range"
  
  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input max_temperature
    for:
      minutes: !input initial_notification_delay
    id: "above_range"
  
  # Trigger when temperature returns to normal range
  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input min_temperature
    below: !input max_temperature
    id: "back_in_range"

condition: []

action:
  - choose:
      # Temperature too low
      - conditions:
          - condition: trigger
            id: "below_range"
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "{{ notification_title }}"
              message: >
                {{ low_temp_message_template.replace('{location}', location)
                                           .replace('{current_temp}', current_temp | string)
                                           .replace('{min_temp}', min_temp | string)
                                           .replace('{max_temp}', max_temp | string)
                                           .replace('{temp_unit}', temp_unit) }}
          
          # Set up repeat notifications if enabled
          - if:
              - condition: template
                value_template: "{{ send_reminders }}"
            then:
              - repeat:
                  count: "{{ max_reminder_count if max_reminder_count > 0 else 999 }}"
                  sequence:
                    - delay:
                        minutes: "{{ reminder_interval }}"
                    - if:
                        - condition: numeric_state
                          entity_id: !input temperature_sensor
                          below: !input min_temperature
                      then:
                        - service: "{{ notification_service }}"
                          data:
                            title: "{{ reminder_title }}"
                            message: >
                              {{ low_temp_reminder_message_template.replace('{location}', location)
                                                                 .replace('{current_temp}', states(sensor_name) | string)
                                                                 .replace('{min_temp}', min_temp | string)
                                                                 .replace('{max_temp}', max_temp | string)
                                                                 .replace('{temp_unit}', temp_unit)
                                                                 .replace('{duration}', relative_time(trigger.from_state.last_changed)) }}
                      else:
                        - stop: "Temperature is back in range"
      
      # Temperature too high
      - conditions:
          - condition: trigger
            id: "above_range"
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "{{ notification_title }}"
              message: >
                {{ high_temp_message_template.replace('{location}', location)
                                            .replace('{current_temp}', current_temp | string)
                                            .replace('{min_temp}', min_temp | string)
                                            .replace('{max_temp}', max_temp | string)
                                            .replace('{temp_unit}', temp_unit) }}
          
          # Set up repeat notifications if enabled
          - if:
              - condition: template
                value_template: "{{ send_reminders }}"
            then:
              - repeat:
                  while:
                    - condition: numeric_state
                      entity_id: !input temperature_sensor
                      above: !input max_temperature
                  sequence:
                    - delay: !input repeat_interval
                    - if:
                        - condition: numeric_state
                          entity_id: !input temperature_sensor
                          above: !input max_temperature
                      then:
                        - service: !input notification_service
                          data:
                            title: "� {{ high_temp_alert_title_template.replace('{location}', location) }}"
                            message: >
                              {{ high_temp_reminder_message_template.replace('{location}', location).replace('{current_temp}', states(sensor_name) | string).replace('{temp_unit}', temp_unit).replace('{duration}', relative_time(trigger.from_state.last_changed)) }}
      
      # Temperature back in range
      - conditions:
          - condition: trigger
            id: "back_in_range"
          - condition: template
            value_template: "{{ send_resolution_notification }}"
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "{{ resolution_title }}"
              message: >
                {{ resolution_message_template.replace('{location}', location)
                                             .replace('{current_temp}', current_temp | string)
                                             .replace('{min_temp}', min_temp | string)
                                             .replace('{max_temp}', max_temp | string)
                                             .replace('{temp_unit}', temp_unit) }}

# Use parallel mode to allow multiple temperature ranges to be monitored simultaneously
# Silent mode prevents log spam if multiple instances trigger
mode: parallel
max_exceeded: silent