blueprint:
  name: "Temperature Range Monitor"
  description: |
    Monitor a temperature sensor and send notifications when temperature goes outside
    of an allowed range for a specified period. Supports repeat notifications while
    out of range and notifications when returning to normal range.
                                title: "ðŸ”„ {{ high_temp_alert_title_template.replace('{location}', location) }}"    **Features:**
    - Configurable temperature range monitoring
    - Customizable notification delay threshold
    - Repeat notifications while out of range
    - Recovery notifications when back in range
    - Support for any temperature sensor
    - Flexible notification service selection
    
    **Recommended Temperature Ranges:**
    - **Refrigerator**: 35-38Â°F (1.7-3.3Â°C)
    - **Freezer**: -5-0Â°F (-20.6 to -17.8Â°C) 
    - **Wine Storage**: 45-65Â°F (7.2-18.3Â°C)
    - **Food Storage Pantry**: 50-70Â°F (10-21.1Â°C)
    - **Greenhouse**: 65-75Â°F (18.3-23.9Â°C)
    - **Server Room**: 64-75Â°F (17.8-23.9Â°C)
    - **Pharmaceutical Storage**: 68-77Â°F (20-25Â°C)
    - **Baby Room**: 68-72Â°F (20-22.2Â°C)
    
  domain: automation
  author: "William Bartholomew"
  homeassistant:
    min_version: "2024.6.0"
  input:
    # Main Configuration Section
    main_config:
      name: "Main Configuration"
      icon: "mdi:thermometer"
      description: "Primary temperature monitoring configuration"
      input:
        temperature_sensor:
          name: Temperature Sensor
          description: The temperature sensor to monitor
          selector:
            entity:
              filter:
                domain: sensor
                device_class: temperature
        
        min_temperature:
          name: Minimum Temperature
          description: Minimum allowed temperature (in the unit of your sensor)
          selector:
            number:
              min: -50
              max: 150
              step: 0.1
              mode: box
              unit_of_measurement: "Â°"
        
        max_temperature:
          name: Maximum Temperature
          description: Maximum allowed temperature (in the unit of your sensor)
          selector:
            number:
              min: -50
              max: 150
              step: 0.1
              mode: box
              unit_of_measurement: "Â°"
        
        location_name:
          name: Location Name
          description: Descriptive name for the monitored location (e.g., "Kitchen Refrigerator")
          default: "Temperature Sensor"
          selector:
            text:
    
    # Threshold Configuration Section
    threshold_config:
      name: "Threshold Configuration"
      icon: "mdi:tune"
      description: "Customize timing and alert thresholds"
      input:
        time_threshold:
          name: Time Threshold
          description: How long temperature must be outside range before triggering notification
          default:
            minutes: 5
          selector:
            duration:
        
        repeat_interval:
          name: Repeat Notification Interval
          description: How often to repeat notifications while out of range
          default:
            minutes: 30
          selector:
            duration:

    # Notification Settings Section
    notification_config:
      name: "Notification Settings"
      icon: "mdi:bell-alert"
      description: "Configure notification delivery and timing"
      input:
        notification_service:
          name: "Notification Service"
          description: "The notification service to use for alerts"
          default: "notify.notify"
          selector:
            select:
              custom_value: true
              options:
                - "notify.notify"
                - "notify.mobile_app"
                - "notify.persistent_notification"
        
        notify_on_recovery:
          name: "Notify on Recovery"
          description: "Send notification when temperature returns to normal range"
          default: true
          selector:
            boolean:
        
        repeat_notifications:
          name: "Enable Repeat Notifications"
          description: "Send additional notifications while temperature remains out of range"
          default: false
          selector:
            boolean:

    # Notification Content Section
    notification_content_config:
      name: "Customize Notification Content (Optional)"
      icon: "mdi:message-text"
      description: "Customize notification titles and messages"
      collapsed: true
      input:
        low_temp_alert_title:
          name: "Low Temperature Alert Title"
          description: "Title for low temperature alerts. Use {location} for location name."
          default: "ðŸ¥¶ Temperature Alert"
          selector:
            text:
        
        low_temp_alert_message:
          name: "Low Temperature Alert Message"
          description: "Message for low temperature alerts. Use {location} for location, {current_temp} for current temperature, {min_temp} for minimum, {max_temp} for maximum, {temp_unit} for unit, {timestamp} for current time."
          default: "Temperature is too LOW: {current_temp}{temp_unit} in {location}\n\nðŸ“Š Current: {current_temp}{temp_unit}\nðŸ“‰ Minimum: {min_temp}{temp_unit}\nðŸ“ˆ Maximum: {max_temp}{temp_unit}\n\n{timestamp}"
          selector:
            text:
              multiline: true
        
        high_temp_alert_title:
          name: "High Temperature Alert Title"
          description: "Title for high temperature alerts. Use {location} for location name."
          default: "ðŸ”¥ Temperature Alert"
          selector:
            text:
        
        high_temp_alert_message:
          name: "High Temperature Alert Message"
          description: "Message for high temperature alerts. Use {location} for location, {current_temp} for current temperature, {min_temp} for minimum, {max_temp} for maximum, {temp_unit} for unit, {timestamp} for current time."
          default: "Temperature is too HIGH: {current_temp}{temp_unit} in {location}\n\nðŸ“Š Current: {current_temp}{temp_unit}\nðŸ“‰ Minimum: {min_temp}{temp_unit}\nðŸ“ˆ Maximum: {max_temp}{temp_unit}\n\n{timestamp}"
          selector:
            text:
              multiline: true
        
        low_temp_reminder_message:
          name: "Low Temperature Reminder Message"
          description: "Message for repeated low temperature alerts. Use {location} for location, {current_temp} for current temperature, {temp_unit} for unit, {duration} for how long out of range, {timestamp} for current time."
          default: "Temperature remains too LOW: {current_temp}{temp_unit} in {location}\n\nDuration: {duration}\n{timestamp}"
          selector:
            text:
              multiline: true
        
        high_temp_reminder_message:
          name: "High Temperature Reminder Message"
          description: "Message for repeated high temperature alerts. Use {location} for location, {current_temp} for current temperature, {temp_unit} for unit, {duration} for how long out of range, {timestamp} for current time."
          default: "Temperature remains too HIGH: {current_temp}{temp_unit} in {location}\n\nDuration: {duration}\n{timestamp}"
          selector:
            text:
              multiline: true
        
        recovery_notification_title:
          name: "Recovery Notification Title"
          description: "Title when temperature returns to normal. Use {location} for location name."
          default: "âœ… Temperature Normal"
          selector:
            text:
        
        recovery_notification_message:
          name: "Recovery Notification Message"
          description: "Message when temperature returns to normal. Use {location} for location, {current_temp} for current temperature, {min_temp} for minimum, {max_temp} for maximum, {temp_unit} for unit, {timestamp} for current time."
          default: "Temperature has returned to normal range: {current_temp}{temp_unit} in {location}\n\nðŸ“Š Current: {current_temp}{temp_unit}\nðŸ“‰ Minimum: {min_temp}{temp_unit}\nðŸ“ˆ Maximum: {max_temp}{temp_unit}\n\n{timestamp}"
          selector:
            text:
              multiline: true

variables:
  sensor_name: !input temperature_sensor
  min_temp: !input min_temperature
  max_temp: !input max_temperature
  location: !input location_name
  current_temp: "{{ states(sensor_name) | float }}"
  temp_unit: "{{ state_attr(sensor_name, 'unit_of_measurement') }}"
  timestamp: "{{ now().strftime('%I:%M %p on %B %d, %Y') }}"
  # Message templates
  low_temp_alert_title_template: !input low_temp_alert_title
  low_temp_alert_message_template: !input low_temp_alert_message
  high_temp_alert_title_template: !input high_temp_alert_title
  high_temp_alert_message_template: !input high_temp_alert_message
  low_temp_reminder_message_template: !input low_temp_reminder_message
  high_temp_reminder_message_template: !input high_temp_reminder_message
  recovery_notification_title_template: !input recovery_notification_title
  recovery_notification_message_template: !input recovery_notification_message

trigger:
  # Trigger when temperature goes outside range
  - platform: numeric_state
    entity_id: !input temperature_sensor
    below: !input min_temperature
    for: !input time_threshold
    id: "below_range"
  
  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input max_temperature
    for: !input time_threshold
    id: "above_range"
  
  # Trigger when temperature returns to normal range
  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input min_temperature
    below: !input max_temperature
    id: "back_in_range"

condition: []

action:
  - choose:
      # Temperature too low
      - conditions:
          - condition: trigger
            id: "below_range"
        sequence:
          - service: !input notification_service
            data:
              title: >
                {{ low_temp_alert_title_template.replace('{location}', location) }}
              message: >
                {{ low_temp_alert_message_template.replace('{location}', location).replace('{current_temp}', current_temp | string).replace('{min_temp}', min_temp | string).replace('{max_temp}', max_temp | string).replace('{temp_unit}', temp_unit).replace('{timestamp}', timestamp) }}
          
          # Set up repeat notifications if enabled
          - if:
              - condition: template
                value_template: !input repeat_notifications
            then:
              - repeat:
                  while:
                    - condition: numeric_state
                      entity_id: !input temperature_sensor
                      below: !input min_temperature
                  sequence:
                    - delay: !input repeat_interval
                    - if:
                        - condition: numeric_state
                          entity_id: !input temperature_sensor
                          below: !input min_temperature
                      then:
                        - service: !input notification_service
                          data:
                            title: "ðŸ”„ {{ low_temp_alert_title_template.replace('{location}', location) }}"
                            message: >
                              {{ low_temp_reminder_message_template.replace('{location}', location).replace('{current_temp}', states(sensor_name) | string).replace('{temp_unit}', temp_unit).replace('{duration}', relative_time(trigger.from_state.last_changed)).replace('{timestamp}', timestamp) }}
      
      # Temperature too high
      - conditions:
          - condition: trigger
            id: "above_range"
        sequence:
          - service: !input notification_service
            data:
              title: >
                {{ high_temp_alert_title_template.replace('{location}', location) }}
              message: >
                {{ high_temp_alert_message_template.replace('{location}', location).replace('{current_temp}', current_temp | string).replace('{min_temp}', min_temp | string).replace('{max_temp}', max_temp | string).replace('{temp_unit}', temp_unit).replace('{timestamp}', timestamp) }}
          
          # Set up repeat notifications if enabled
          - if:
              - condition: template
                value_template: !input repeat_notifications
            then:
              - repeat:
                  while:
                    - condition: numeric_state
                      entity_id: !input temperature_sensor
                      above: !input max_temperature
                  sequence:
                    - delay: !input repeat_interval
                    - if:
                        - condition: numeric_state
                          entity_id: !input temperature_sensor
                          above: !input max_temperature
                      then:
                        - service: !input notification_service
                          data:
                            title: "ï¿½ {{ high_temp_alert_title_template.replace('{location}', location) }}"
                            message: >
                              {{ high_temp_reminder_message_template.replace('{location}', location).replace('{current_temp}', states(sensor_name) | string).replace('{temp_unit}', temp_unit).replace('{duration}', relative_time(trigger.from_state.last_changed)).replace('{timestamp}', timestamp) }}
      
      # Temperature back in range
      - conditions:
          - condition: trigger
            id: "back_in_range"
          - condition: template
            value_template: !input notify_on_recovery
        sequence:
          - service: !input notification_service
            data:
              title: >
                {{ recovery_notification_title_template.replace('{location}', location) }}
              message: >
                {{ recovery_notification_message_template.replace('{location}', location).replace('{current_temp}', current_temp | string).replace('{min_temp}', min_temp | string).replace('{max_temp}', max_temp | string).replace('{temp_unit}', temp_unit).replace('{timestamp}', timestamp) }}

# Use parallel mode to allow multiple temperature ranges to be monitored simultaneously
# Silent mode prevents log spam if multiple instances trigger
mode: parallel
max_exceeded: silent