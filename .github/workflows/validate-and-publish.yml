name: Validate and Publish Home Assistant Blueprints

on:
  push:
    branches: ["main"]
    paths:
      - "blueprints/**/*.yaml"
      - "blueprints/**/*.yml"
      - ".github/workflows/**"
  pull_request:
    branches: ["main"]
    paths:
      - "blueprints/**/*.yaml"
      - "blueprints/**/*.yml"
      - ".github/workflows/**"
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  validate:
    name: Validate YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for semver calculation

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/.github/workflows/**') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Validate YAML syntax
        run: |
          echo "üîç Validating YAML syntax..."
          find blueprints -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Checking: $file"
            python -c "
          import yaml
          import sys
          try:
              with open('$file', 'r') as f:
                  yaml.safe_load(f)
              print('‚úÖ Valid YAML: $file')
          except yaml.YAMLError as e:
              print('‚ùå Invalid YAML: $file - Error: {}'.format(e))
              sys.exit(1)
          except Exception as e:
              print('‚ùå Error reading file: $file - Error: {}'.format(e))
              sys.exit(1)
          "
          done

      - name: Validate Home Assistant Blueprint Schema
        run: |
          echo "üè† Validating Home Assistant Blueprint schema..."
          find blueprints -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating blueprint schema: $file"
            python -c "
          import yaml
          import sys
          
          required_fields = ['name', 'domain']
          valid_domains = ['automation', 'script', 'template']
          
          try:
              with open('$file', 'r') as f:
                  data = yaml.safe_load(f)
              
              if not isinstance(data, dict):
                  print('‚ùå Blueprint must be a YAML object: $file')
                  sys.exit(1)
              
              if 'blueprint' not in data:
                  print('‚ùå Missing \"blueprint\" key: $file')
                  sys.exit(1)
              
              blueprint = data['blueprint']
              
              for field in required_fields:
                  if field not in blueprint:
                      print('‚ùå Missing required field \"{}\" in blueprint metadata: $file'.format(field))
                      sys.exit(1)
              
              if blueprint['domain'] not in valid_domains:
                  print('‚ùå Invalid domain \"{}\". Must be one of {}: $file'.format(blueprint['domain'], valid_domains))
                  sys.exit(1)
              
              # Validate name is a string and not empty
              if not isinstance(blueprint['name'], str) or not blueprint['name'].strip():
                  print('‚ùå Blueprint name must be a non-empty string: $file')
                  sys.exit(1)
              
              # Check for recommended fields
              recommended_fields = ['description', 'author']
              missing_recommended = [f for f in recommended_fields if f not in blueprint]
              if missing_recommended:
                  print('‚ö†Ô∏è  Missing recommended fields {}: $file'.format(missing_recommended))
              
              print('‚úÖ Valid blueprint schema: $file')
              
          except yaml.YAMLError as e:
              print('‚ùå YAML error in: $file - Error: {}'.format(e))
              sys.exit(1)
          except Exception as e:
              print('‚ùå Error validating: $file - Error: {}'.format(e))
              sys.exit(1)
          "
          done

      - name: Check for duplicate blueprint names
        run: |
          echo "üîç Checking for duplicate blueprint names..."
          python -c "
          import yaml
          import sys
          import os
          
          names = {}
          duplicates = []
          
          for root, dirs, files in os.walk('blueprints'):
              for file in files:
                  if file.endswith('.yaml') or file.endswith('.yml'):
                      filepath = os.path.join(root, file)
                      try:
                          with open(filepath, 'r') as f:
                              data = yaml.safe_load(f)
                          
                          if 'blueprint' in data and 'name' in data['blueprint']:
                              name = data['blueprint']['name']
                              if name in names:
                                  duplicates.append((name, names[name], filepath))
                              else:
                                  names[name] = filepath
                      except Exception as e:
                          print('Error reading {}: {}'.format(filepath, e))
          
          if duplicates:
              print('‚ùå Duplicate blueprint names found:')
              for name, file1, file2 in duplicates:
                  print('  \"{}\" in {} and {}'.format(name, file1, file2))
              sys.exit(1)
          else:
              print('‚úÖ No duplicate blueprint names found')
          "

  build-and-deploy:
    name: Build and Deploy to GitHub Pages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: validate
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for semver calculation

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jinja2

      - name: Generate semantic versions for blueprints
        run: |
          echo "üìù Generating semantic versions based on commit history..."
          mkdir -p dist/blueprints
          
          python -c "
          import os
          import yaml
          import subprocess
          import re
          from pathlib import Path
          
          def get_git_commits_for_file(filepath):
              '''Get commit history for a specific file'''
              try:
                  result = subprocess.run(
                      ['git', 'log', '--oneline', '--follow', '--', filepath],
                      capture_output=True, text=True, check=True
                  )
                  return result.stdout.strip().split('\n') if result.stdout.strip() else []
              except subprocess.CalledProcessError:
                  return []
          
          def calculate_semver(commits, filepath):
              '''Calculate semantic version based on commit messages'''
              major, minor, patch = 1, 0, 0
              
              for commit in commits:
                  if not commit.strip():
                      continue
                  
                  commit_msg = commit.split(' ', 1)[1] if ' ' in commit else commit
                  commit_lower = commit_msg.lower()
                  
                  # Major version indicators
                  if any(keyword in commit_lower for keyword in [
                      'breaking change', 'breaking:', 'major:', '!:', 'incompatible'
                  ]):
                      major += 1
                      minor = 0
                      patch = 0
                  # Minor version indicators  
                  elif any(keyword in commit_lower for keyword in [
                      'feat:', 'feature:', 'add:', 'new:', 'minor:', 'enhancement'
                  ]):
                      minor += 1
                      patch = 0
                  # Patch version indicators
                  elif any(keyword in commit_lower for keyword in [
                      'fix:', 'patch:', 'bug:', 'hotfix:', 'chore:', 'docs:', 'style:'
                  ]):
                      patch += 1
              
              # If no conventional commits found, base version on commit count
              if major == 1 and minor == 0 and patch == 0:
                  commit_count = len([c for c in commits if c.strip()])
                  if commit_count == 0:
                      return '1.0.0'
                  elif commit_count < 5:
                      return f'1.0.{commit_count}'
                  else:
                      minor_count = commit_count // 5
                      patch_count = commit_count % 5
                      return f'1.{minor_count}.{patch_count}'
              
              return f'{major}.{minor}.{patch}'
          
          def process_blueprints():
              blueprint_info = []
              
              for root, dirs, files in os.walk('blueprints'):
                  for file in files:
                      if file.endswith('.yaml') or file.endswith('.yml'):
                          filepath = os.path.join(root, file)
                          
                          try:
                              with open(filepath, 'r') as f:
                                  data = yaml.safe_load(f)
                              
                              if 'blueprint' not in data:
                                  continue
                              
                              # Get commit history and calculate version
                              commits = get_git_commits_for_file(filepath)
                              version = calculate_semver(commits, filepath)
                              
                              # Create versioned blueprint
                              original_name = data['blueprint']['name']
                              data['blueprint']['name'] = f'{original_name} v{version}'
                              
                              # Preserve relative directory structure
                              rel_path = os.path.relpath(filepath, 'blueprints')
                              output_path = os.path.join('dist/blueprints', rel_path)
                              
                              # Create output directory
                              os.makedirs(os.path.dirname(output_path), exist_ok=True)
                              
                              # Write versioned blueprint
                              with open(output_path, 'w') as f:
                                  yaml.dump(data, f, default_flow_style=False, sort_keys=False)
                              
                              # Collect info for index
                              blueprint_info.append({
                                  'name': original_name,
                                  'versioned_name': data['blueprint']['name'],
                                  'version': version,
                                  'domain': data['blueprint']['domain'],
                                  'description': data['blueprint'].get('description', ''),
                                  'author': data['blueprint'].get('author', ''),
                                  'file_path': rel_path,
                                  'min_version': data['blueprint'].get('homeassistant', {}).get('min_version', ''),
                                  'category': os.path.dirname(rel_path) if os.path.dirname(rel_path) else 'General'
                              })
                              
                              print(f'‚úÖ Processed {filepath} -> v{version}')
                              
                          except Exception as e:
                              print(f'‚ùå Error processing {filepath}: {e}')
                              continue
              
              # Save blueprint info for index generation
              with open('dist/blueprint_info.yaml', 'w') as f:
                  yaml.dump(blueprint_info, f, default_flow_style=False)
              
              return blueprint_info
          
          blueprints = process_blueprints()
          print(f'üì¶ Processed {len(blueprints)} blueprints')
          "

      - name: Generate GitHub Pages site
        run: |
          echo "üåê Generating GitHub Pages site..."
          
          python -c "
          import yaml
          import json
          import os
          from datetime import datetime
          from urllib.parse import quote
          
          # Load blueprint info
          with open('dist/blueprint_info.yaml', 'r') as f:
              blueprints = yaml.safe_load(f)
          
          # Get repository info from environment
          repo_owner = os.environ.get('GITHUB_REPOSITORY', '').split('/')[0]
          repo_name = os.environ.get('GITHUB_REPOSITORY', '').split('/')[1] if '/' in os.environ.get('GITHUB_REPOSITORY', '') else 'ha-blueprints'
          
          # Group blueprints by category
          categories = {}
          for bp in blueprints:
              category = bp['category']
              if category not in categories:
                  categories[category] = []
              categories[category].append(bp)
          
          # Generate HTML
          html_content = '''<!DOCTYPE html>
          <html lang=\"en\">
          <head>
              <meta charset=\"UTF-8\">
              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
              <title>Home Assistant Blueprints</title>
              <style>
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }
                  
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }
                  
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                  }
                  
                  .header {
                      text-align: center;
                      margin-bottom: 40px;
                      background: rgba(255, 255, 255, 0.95);
                      padding: 40px 20px;
                      border-radius: 15px;
                      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                  }
                  
                  .header h1 {
                      color: #2c3e50;
                      font-size: 3em;
                      margin-bottom: 10px;
                      background: linear-gradient(135deg, #667eea, #764ba2);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                  }
                  
                  .header p {
                      color: #7f8c8d;
                      font-size: 1.2em;
                      margin-bottom: 20px;
                  }
                  
                  .stats {
                      display: flex;
                      justify-content: center;
                      gap: 30px;
                      margin: 20px 0;
                  }
                  
                  .stat {
                      text-align: center;
                  }
                  
                  .stat-number {
                      font-size: 2em;
                      font-weight: bold;
                      color: #3498db;
                  }
                  
                  .stat-label {
                      color: #7f8c8d;
                      font-size: 0.9em;
                  }
                  
                  .category {
                      background: rgba(255, 255, 255, 0.95);
                      margin-bottom: 30px;
                      border-radius: 15px;
                      overflow: hidden;
                      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                  }
                  
                  .category-header {
                      background: linear-gradient(135deg, #3498db, #2980b9);
                      color: white;
                      padding: 20px;
                      font-size: 1.5em;
                      font-weight: bold;
                  }
                  
                  .blueprints-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                      gap: 20px;
                      padding: 20px;
                  }
                  
                  .blueprint-card {
                      border: 1px solid #e1e8ed;
                      border-radius: 10px;
                      padding: 20px;
                      background: white;
                      transition: all 0.3s ease;
                      position: relative;
                  }
                  
                  .blueprint-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
                  }
                  
                  .blueprint-title {
                      font-size: 1.3em;
                      font-weight: bold;
                      color: #2c3e50;
                      margin-bottom: 10px;
                      line-height: 1.3;
                  }
                  
                  .blueprint-version {
                      background: #3498db;
                      color: white;
                      padding: 4px 8px;
                      border-radius: 15px;
                      font-size: 0.8em;
                      font-weight: bold;
                      position: absolute;
                      top: 15px;
                      right: 15px;
                  }
                  
                  .blueprint-domain {
                      background: #e74c3c;
                      color: white;
                      padding: 4px 8px;
                      border-radius: 15px;
                      font-size: 0.8em;
                      font-weight: bold;
                      display: inline-block;
                      margin-bottom: 10px;
                  }
                  
                  .blueprint-domain.automation { background: #27ae60; }
                  .blueprint-domain.script { background: #f39c12; }
                  .blueprint-domain.template { background: #9b59b6; }
                  
                  .blueprint-description {
                      color: #7f8c8d;
                      margin-bottom: 15px;
                      display: -webkit-box;
                      -webkit-line-clamp: 3;
                      -webkit-box-orient: vertical;
                      overflow: hidden;
                  }
                  
                  .blueprint-meta {
                      font-size: 0.9em;
                      color: #95a5a6;
                      margin-bottom: 15px;
                  }
                  
                  .blueprint-actions {
                      display: flex;
                      gap: 10px;
                  }
                  
                  .btn {
                      padding: 10px 15px;
                      border: none;
                      border-radius: 8px;
                      font-weight: bold;
                      text-decoration: none;
                      text-align: center;
                      cursor: pointer;
                      transition: all 0.3s ease;
                      flex: 1;
                  }
                  
                  .btn-primary {
                      background: linear-gradient(135deg, #3498db, #2980b9);
                      color: white;
                  }
                  
                  .btn-primary:hover {
                      background: linear-gradient(135deg, #2980b9, #2c3e50);
                      transform: translateY(-2px);
                  }
                  
                  .btn-secondary {
                      background: #95a5a6;
                      color: white;
                  }
                  
                  .btn-secondary:hover {
                      background: #7f8c8d;
                      transform: translateY(-2px);
                  }
                  
                  .footer {
                      text-align: center;
                      margin-top: 40px;
                      padding: 20px;
                      background: rgba(255, 255, 255, 0.95);
                      border-radius: 15px;
                      color: #7f8c8d;
                  }
                  
                  @media (max-width: 768px) {
                      .header h1 { font-size: 2em; }
                      .stats { flex-direction: column; gap: 15px; }
                      .blueprints-grid { grid-template-columns: 1fr; }
                      .blueprint-actions { flex-direction: column; }
                  }
              </style>
          </head>
          <body>
              <div class=\"container\">
                  <div class=\"header\">
                      <h1>üè† Home Assistant Blueprints</h1>
                      <p>Ready-to-use automation blueprints for your smart home</p>
                      <div class=\"stats\">
                          <div class=\"stat\">
                              <div class=\"stat-number\">{total_blueprints}</div>
                              <div class=\"stat-label\">Total Blueprints</div>
                          </div>
                          <div class=\"stat\">
                              <div class=\"stat-number\">{total_categories}</div>
                              <div class=\"stat-label\">Categories</div>
                          </div>
                          <div class=\"stat\">
                              <div class=\"stat-number\">{total_domains}</div>
                              <div class=\"stat-label\">Domains</div>
                          </div>
                      </div>
                  </div>
          '''.format(
              total_blueprints=len(blueprints),
              total_categories=len(categories),
              total_domains=len(set(bp['domain'] for bp in blueprints))
          )
          
          # Add categories and blueprints
          for category, category_blueprints in sorted(categories.items()):
              html_content += f'''
                  <div class=\"category\">
                      <div class=\"category-header\">{category.title()}</div>
                      <div class=\"blueprints-grid\">'''
              
              for bp in sorted(category_blueprints, key=lambda x: x['name']):
                  # Create import URL for Home Assistant
                  raw_url = f'https://raw.githubusercontent.com/{repo_owner}/{repo_name}/gh-pages/blueprints/{quote(bp[\"file_path\"])}'
                  import_url = f'https://my.home-assistant.io/redirect/blueprint_import/?blueprint_url={quote(raw_url)}'
                  
                  # Clean description for display
                  description = bp['description'][:200] + '...' if len(bp['description']) > 200 else bp['description']
                  description = description.replace('\n', ' ').strip()
                  
                  html_content += f'''
                      <div class=\"blueprint-card\">
                          <div class=\"blueprint-version\">v{bp['version']}</div>
                          <div class=\"blueprint-domain {bp['domain']}\">{bp['domain'].title()}</div>
                          <div class=\"blueprint-title\">{bp['name']}</div>
                          <div class=\"blueprint-description\">{description}</div>
                          <div class=\"blueprint-meta\">
                              {f'By: {bp[\"author\"]} ‚Ä¢ ' if bp['author'] else ''}
                              {f'Requires HA {bp[\"min_version\"]}+' if bp['min_version'] else 'No minimum version specified'}
                          </div>
                          <div class=\"blueprint-actions\">
                              <a href=\"{import_url}\" class=\"btn btn-primary\" target=\"_blank\">
                                  üöÄ Import to HA
                              </a>
                              <a href=\"{raw_url}\" class=\"btn btn-secondary\" target=\"_blank\">
                                  üìÑ View YAML
                              </a>
                          </div>
                      </div>'''
              
              html_content += '''
                      </div>
                  </div>'''
          
          html_content += f'''
                  <div class=\"footer\">
                      <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')} ‚Ä¢ 
                      <a href=\"https://github.com/{repo_owner}/{repo_name}\" target=\"_blank\">View on GitHub</a></p>
                      <p>Click \"üöÄ Import to HA\" to add blueprints directly to your Home Assistant instance</p>
                  </div>
              </div>
          </body>
          </html>'''
          
          # Write HTML file
          with open('dist/index.html', 'w') as f:
              f.write(html_content)
          
          print('‚úÖ Generated index.html with {} blueprints'.format(len(blueprints)))
          "

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [validate, build-and-deploy]
    steps:
      - name: Success notification
        run: |
          echo "üéâ Successfully validated and published Home Assistant Blueprints!"
          echo "üìä Validation: ‚úÖ Passed"
          echo "üöÄ Deployment: ‚úÖ Published to GitHub Pages"
          echo "üåê Visit: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
